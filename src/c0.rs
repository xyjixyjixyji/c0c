// auto-generated: "lalrpop 0.20.2"
// sha3: 61ec965f652120f0734878b1b6fc59d3ffb90ebbe7586f373ec588c1f8659977
use crate::ast::{
  Arg, ArgList, AsnOp, BinOp, Expr, Fdecl, Param, ParamList, PostOp, ReturnType, Sdecl, Sdefn,
  Stmts, SurfaceFdefn, SurfaceGdecl, SurfaceProgram, SurfaceStmt, Typ, Typedef, UnOp,
};
use crate::lex::{LexerState, Token};
use lalrpop_util::ParseError;
use std::str::FromStr;
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;
extern crate alloc;
extern crate core;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::needless_lifetimes, clippy::type_complexity, clippy::needless_return, clippy::too_many_arguments, clippy::never_loop, clippy::match_single_binding, clippy::needless_raw_string_hashes)]
mod __parse__SurfaceProgram {

    use crate::ast::{
    SurfaceProgram, SurfaceGdecl, SurfaceFdefn, SurfaceStmt, Fdecl, Sdecl, Sdefn, Typedef,
    Param, ParamList, ReturnType, Stmts, Arg, ArgList,
    Expr, BinOp, UnOp, PostOp, Typ, AsnOp
};
    use lalrpop_util::ParseError;
    use crate::lex::{Token, LexerState};
    use std::str::FromStr;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input>
     {
        Variant0(Token<'input>),
        Variant1(&'input str),
        Variant2(String),
        Variant3(Arg),
        Variant4(ArgList),
        Variant5(AsnOp),
        Variant6(Expr),
        Variant7(SurfaceStmt),
        Variant8(core::option::Option<Expr>),
        Variant9(Fdecl),
        Variant10(ParamList),
        Variant11(i64),
        Variant12(BinOp),
        Variant13(Param),
        Variant14(PostOp),
        Variant15(ReturnType),
        Variant16(Sdecl),
        Variant17(Sdefn),
        Variant18(Option<Box<SurfaceStmt>>),
        Variant19(Vec<SurfaceStmt>),
        Variant20(SurfaceFdefn),
        Variant21(SurfaceGdecl),
        Variant22(alloc::vec::Vec<SurfaceGdecl>),
        Variant23(SurfaceProgram),
        Variant24(Typ),
        Variant25(Typedef),
        Variant26(UnOp),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 90, 0, 0, 0, 0, 0, 91, 0, 0, 4, 0, 5, 92, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 90, 0, 0, 0, 0, 0, 91, 0, 0, 4, 0, 5, 92, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 90, 0, 0, 0, 0, 0, 91, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 90, 0, 0, 0, 0, 0, 91, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 90, 0, 0, 0, 0, 0, 91, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0,
        // State 11
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 128, 89, 90, 0, 129, 130, 93, 131, 91, 132, 33, 8, 133, 0, 0, 134, 12, 0, 0, 0, -105, 135,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, -87, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, -49, 0, 0, 0, 0, 0, -49, 0, 0, 0, 0, 0, 0, 0, -49, -49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, -49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
        // State 15
        0, 0, 0, 0, 0, 140, 0, 0, -20, 0, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, -20, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 0, 0,
        // State 16
        0, -29, 141, 0, -29, -29, 0, 0, -29, 142, 0, -29, 0, 0, -29, -29, 0, 0, 0, 0, 143, 0, -29, -29, -29, -29, 0, -29, 0, -29, -29, -29, -29, 0, -29, 0, 0, -29, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, -29, 0, 0,
        // State 17
        0, -31, 0, 0, -31, -31, 0, 0, -31, 0, 0, 144, 0, 0, -31, 145, 0, 0, 0, 0, 0, 0, -31, -31, -31, -31, 0, -31, 0, -31, -31, -31, -31, 0, -31, 0, 0, -31, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, -31, 0, 0,
        // State 18
        0, -33, 0, 0, -33, -33, 0, 0, -33, 0, 0, 0, 0, 0, -33, 0, 0, 0, 0, 0, 0, 0, -33, -33, -33, 146, 0, -33, 0, -33, -33, -33, 147, 0, -33, 0, 0, -33, -33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -33, 0, -33, 0, 0,
        // State 19
        0, -35, 0, 0, -35, -35, 0, 0, -35, 0, 0, 0, 0, 0, -35, 0, 0, 0, 0, 0, 0, 0, -35, -35, 148, 0, 0, 149, 0, -35, 150, 151, 0, 0, -35, 0, 0, -35, -35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, 0, -35, 0, 0,
        // State 20
        0, 152, 0, 0, -37, -37, 0, 0, -37, 0, 0, 0, 0, 0, -37, 0, 0, 0, 0, 0, 0, 0, -37, -37, 0, 0, 0, 0, 0, 153, 0, 0, 0, 0, -37, 0, 0, -37, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37, 0, -37, 0, 0,
        // State 21
        0, 0, 0, 0, 154, -39, 0, 0, -39, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, 0, 0, -39, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, 0, 0, -39, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, 0, -39, 0, 0,
        // State 22
        0, 0, 0, 0, 0, -41, 0, 0, -41, 0, 0, 0, 0, 0, -41, 0, 0, 0, 0, 0, 0, 0, -41, -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, 0, 0, -41, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, 0, -41, 0, 0,
        // State 23
        0, 0, 0, 0, 0, -25, 0, 0, -25, 0, 0, 0, 0, 0, -25, 0, 0, 0, 0, 0, 0, 0, -25, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25, 0, 0, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, -25, 0, 0,
        // State 24
        0, -111, -111, -111, -111, -111, -111, 47, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, 0, -111, -111, -111, -111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -111, -111, -111, 0, 0,
        // State 25
        0, -21, -21, 160, -21, -21, 161, 0, -21, -21, 162, -21, 0, 163, 0, -21, 0, 164, 0, 0, -21, 165, 0, -21, -21, -21, 166, -21, 167, -21, -21, -21, -21, 168, -21, 0, 0, 0, -21, 169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 170, -21, 0, 0,
        // State 26
        0, -108, -108, -108, -108, -108, -108, 0, -108, -108, -108, -108, 172, -108, -108, -108, 173, -108, 0, 0, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, 0, 0, -108, -108, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, -108, -108, 0, 0,
        // State 27
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 128, 89, 90, 0, 129, 130, 93, 131, 91, 132, 33, 8, 133, 0, 0, 134, 12, 0, 0, 0, -105, 135,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 29
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 30
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 31
        0, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 32
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 33
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 90, 0, 0, 0, 0, 0, 91, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 34
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 90, 0, 0, 0, 0, 0, 91, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0,
        // State 35
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 36
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 37
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 38
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 39
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 40
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 41
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 42
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 43
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 44
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 45
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 46
        123, 0, 0, 0, 0, 0, 0, 31, 187, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 47
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 49
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 50
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 51
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 90, 0, 0, 0, 0, 0, 91, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 52
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 90, 0, 0, 0, 0, 0, 91, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 53
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 54
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 89, 90, 0, 129, 0, 93, 0, 91, 132, 0, 8, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 55
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 56
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 57
        0, 0, 0, 0, 0, 0, 0, 0, -87, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 58
        0, 0, 0, 0, 0, 140, 0, 0, -19, 0, 0, 0, 0, 0, -19, 0, 0, 0, 0, 0, 0, 0, -19, -19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -19, 0, 0, -19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -19, 0, 0,
        // State 59
        0, 0, 0, 0, 0, -24, 0, 0, -24, 0, 0, 0, 0, 0, -24, 0, 0, 0, 0, 0, 0, 0, -24, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, 0, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, -24, 0, 0,
        // State 60
        0, -28, 141, 0, -28, -28, 0, 0, -28, 142, 0, -28, 0, 0, -28, -28, 0, 0, 0, 0, 143, 0, -28, -28, -28, -28, 0, -28, 0, -28, -28, -28, -28, 0, -28, 0, 0, -28, -28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -28, 0, -28, 0, 0,
        // State 61
        0, -30, 0, 0, -30, -30, 0, 0, -30, 0, 0, 144, 0, 0, -30, 145, 0, 0, 0, 0, 0, 0, -30, -30, -30, -30, 0, -30, 0, -30, -30, -30, -30, 0, -30, 0, 0, -30, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, -30, 0, 0,
        // State 62
        0, -32, 0, 0, -32, -32, 0, 0, -32, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, 0, 0, 0, -32, -32, -32, 146, 0, -32, 0, -32, -32, -32, 147, 0, -32, 0, 0, -32, -32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32, 0, -32, 0, 0,
        // State 63
        0, -34, 0, 0, -34, -34, 0, 0, -34, 0, 0, 0, 0, 0, -34, 0, 0, 0, 0, 0, 0, 0, -34, -34, 148, 0, 0, 149, 0, -34, 150, 151, 0, 0, -34, 0, 0, -34, -34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34, 0, -34, 0, 0,
        // State 64
        0, 152, 0, 0, -36, -36, 0, 0, -36, 0, 0, 0, 0, 0, -36, 0, 0, 0, 0, 0, 0, 0, -36, -36, 0, 0, 0, 0, 0, 153, 0, 0, 0, 0, -36, 0, 0, -36, -36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -36, 0, -36, 0, 0,
        // State 65
        0, 0, 0, 0, 154, -38, 0, 0, -38, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, 0, 0, -38, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, -38, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, 0, -38, 0, 0,
        // State 66
        0, 0, 0, 0, 0, -40, 0, 0, -40, 0, 0, 0, 0, 0, -40, 0, 0, 0, 0, 0, 0, 0, -40, -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -40, 0, 0, -40, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -40, 0, -40, 0, 0,
        // State 67
        0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 68
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 69
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 70
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 71
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 72
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 0, 0, 0, 129, 0, 93, 0, 0, 132, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 73
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 128, 89, 90, 0, 129, 130, 93, 131, 91, 132, 33, 8, 133, 0, 0, 134, 12, 0, 0, 0, 0, 135,
        // State 74
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 128, 89, 90, 0, 129, 130, 93, 131, 91, 132, 33, 8, 133, 0, 0, 134, 12, 0, 0, 0, 0, 135,
        // State 75
        0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 76
        123, 0, 0, 0, 0, 0, 0, 31, -99, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 0, 89, 90, 0, 129, 0, 93, 0, 91, 132, 0, 8, 133, 0, 0, 0, 0, 0, 0, 0, 0, 135,
        // State 77
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 128, 89, 90, 0, 129, 130, 93, 131, 91, 132, 33, 8, 133, 0, 0, 134, 12, 0, 0, 0, 0, 135,
        // State 78
        123, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 126, 127, 128, 89, 90, 0, 129, 130, 93, 131, 91, 132, 33, 8, 133, 0, 0, 134, 12, 0, 0, 0, 0, 135,
        // State 79
        0, 0, 0, 0, 0, 0, 0, 0, -139, -139, 0, 0, 0, 0, -139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -139, 0, 0, 0, 0, 0, 0, 0, -139, 0, 0, 0, -139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 80
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -122, -122, 0, 0, 0, 0, 0, -122, 0, 0, -122, 0, -122, -122, 0, 0, 0, 0, 0, 0, 0,
        // State 81
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, -125, 0, 0, 0, 0, 0, -125, 0, 0, -125, 0, -125, -125, 0, 0, 0, 0, 0, 0, 0,
        // State 82
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, -126, 0, 0, 0, 0, 0, -126, 0, 0, -126, 0, -126, -126, 0, 0, 0, 0, 0, 0, 0,
        // State 83
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -123, -123, 0, 0, 0, 0, 0, -123, 0, 0, -123, 0, -123, -123, 0, 0, 0, 0, 0, 0, 0,
        // State 84
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -129, -129, 0, 0, 0, 0, 0, -129, 0, 0, -129, 0, -129, -129, 0, 0, 0, 0, 0, 0, 0,
        // State 85
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 86
        0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 87
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124, -124, 0, 0, 0, 0, 0, -124, 0, 0, -124, 0, -124, -124, 0, 0, 0, 0, 0, 0, 0,
        // State 88
        0, 0, 0, 0, 0, 0, 0, 0, -137, -137, 0, 0, 0, 0, -137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -137, 0, 0, 0, 0, 0, 0, 0, -137, 0, 0, 0, -137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 89
        0, -48, -48, -48, -48, -48, -48, 0, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, 0, -48, -48, -48, -48, 0, 0, 0, 0, -48, 0, 0, 0, -48, 0, 0, 0, 0, 0, 0, 0, 0, 0, -48, -48, -48, -48, 0, 0,
        // State 90
        0, 0, 0, 0, 0, 0, 0, 0, -136, -136, 0, 0, 0, 0, -136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -136, 0, 0, 0, 0, 0, 0, 0, -136, 0, 0, 0, -136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 91
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 92
        0, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, 0, -59, -59, -59, -59, 0, 0, 0, 0, -59, 0, 0, 0, -59, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, -59, -59, -59, 0, 0,
        // State 93
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -130, -130, 0, 0, 0, 0, 0, -130, 0, 0, -130, 0, -130, -130, 0, 0, 0, 0, 0, 0, 0,
        // State 94
        0, 0, 0, 0, 0, 0, 0, 0, -140, -140, 0, 0, 0, 0, -140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -140, 0, 0, 0, 0, 0, 0, 0, -140, 0, 0, 0, -140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 95
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 96
        0, 0, 0, 0, 0, 0, 0, 0, 0, -138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0,
        // State 97
        0, -2, -2, -2, -2, -2, -2, 0, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 0, -2, -2, -2, -2, 0, 0, 0, 0, -2, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -2, -2, -2, 0, 0,
        // State 98
        0, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, 0,
        // State 99
        0, 0, 0, 0, 0, 0, 0, 0, -141, -141, 0, 0, 0, 0, -141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -141, 0, 0, 0, 0, 0, 0, 0, -141, 0, 0, 0, -141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 100
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, -93, 0, 0, 0, 0, 0, -93, 0, 0, -93, 0, -93, -93, 0, 0, 0, 0, 0, 0, 0,
        // State 101
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 102
        0, 0, 0, 0, 0, 0, 0, 0, -138, -138, 0, 0, 0, 0, -138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -138, 0, 0, 0, 0, 0, 0, 0, -138, 0, 0, 0, -138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 103
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -121, -121, 0, 0, 0, 0, 0, -121, 0, 0, -121, 0, -121, -121, 0, 0, 0, 0, 0, 0, 0,
        // State 104
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, -53, 0, 0, 0, 0, 0, -53, 0, 0, -53, 0, -53, -53, 0, 0, 0, 0, 0, 0, 0,
        // State 105
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85, 0, 0, 0, 0, 0,
        // State 106
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
        // State 107
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 108
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -142, -142, 0, 0, 0, 0, 0, -142, 0, 0, -142, 0, -142, -142, 0, 0, 0, 0, 0, 0, 0,
        // State 109
        0, -23, -23, 0, -23, -23, 0, 0, -23, -23, 0, -23, 0, 0, -23, -23, 0, 0, 0, 0, -23, 0, -23, -23, -23, -23, 0, -23, 0, -23, -23, -23, -23, 0, -23, 0, 0, -23, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, -23, 0, 0,
        // State 110
        0, -27, -27, 0, -27, -27, 0, 0, -27, -27, 0, -27, 0, 0, -27, -27, 0, 0, 0, 0, -27, 0, -27, -27, -27, -27, 0, -27, 0, -27, -27, -27, -27, 0, -27, 0, 0, -27, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, 0, -27, 0, 0,
        // State 111
        -44, 0, 0, 0, 0, 0, 0, -44, 0, -44, 0, 0, 0, 0, 0, -44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -44, 0, 0, 0, 0, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, 0, 0, -44, -44, 0, 0, 0, -44, -44,
        // State 112
        -134, 0, 0, 0, 0, 0, 0, -134, 0, -134, 0, 0, 0, 0, 0, -134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -134, 0, 0, 0, 0, -134, -134, -134, -134, -134, 0, -134, -134, -134, -134, -134, -134, -134, -134, -134, 0, 0, -134, -134, 0, 0, 0, -134, -134,
        // State 113
        0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 114
        0, -115, -115, -115, -115, -115, -115, 0, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, 0, -115, -115, -115, -115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115, -115, -115, 0, 0,
        // State 115
        0, -110, -110, -110, -110, -110, -110, 0, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, 0, -110, -110, -110, -110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -110, -110, -110, 0, 0,
        // State 116
        -133, 0, 0, 0, 0, 0, 0, -133, 0, -133, 0, 0, 0, 0, 0, -133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -133, 0, 0, 0, 0, -133, -133, -133, -133, -133, 0, -133, -133, -133, -133, -133, -133, -133, -133, -133, 0, 0, -133, -133, 0, 0, 0, -133, -133,
        // State 117
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 118
        -43, 0, 0, 0, 0, 0, 0, -43, 0, -43, 0, 0, 0, 0, 0, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, 0, 0, 0, 0, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, 0, 0, -43, -43, 0, 0, 0, -43, -43,
        // State 119
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0,
        // State 120
        0, -120, -120, -120, -120, -120, -120, 0, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, 49, 50, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, 0, 51, -120, -120, -120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120, -120, -120, 0, 0,
        // State 121
        0, 0, 0, 0, 0, 0, 0, 0, -50, 0, 0, 0, 0, 0, -50, 0, 0, 0, 0, 0, 0, 0, -50, -50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 122
        -143, 0, 0, 0, 0, 0, 0, -143, 0, -143, 0, 0, 0, 0, 0, -143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -143, 0, 0, 0, 0, -143, -143, 0, 0, 0, 0, -143, 0, -143, 0, 0, -143, 0, 0, -143, 0, 0, 0, 0, 0, 0, 0, 0, -143,
        // State 123
        -145, 0, 0, 0, 0, 0, 0, -145, 0, -145, 0, 0, 0, 0, 0, -145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -145, 0, 0, 0, 0, -145, -145, 0, 0, 0, 0, -145, 0, -145, 0, 0, -145, 0, 0, -145, 0, 0, 0, 0, 0, 0, 0, 0, -145,
        // State 124
        0, -109, -109, -109, -109, -109, -109, 0, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, 0, -109, -109, -109, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, -109, -109, 0, 0,
        // State 125
        0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 126
        0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 127
        0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 128
        0, -113, -113, -113, -113, -113, -113, 0, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, 0, -113, -113, -113, -113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -113, -113, -113, 0, 0,
        // State 129
        0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 130
        0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 131
        0, -60, -60, -60, -60, -60, -60, 0, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, 0, -60, -60, -60, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, -60, -60, 0, 0,
        // State 132
        0, -112, -112, -112, -112, -112, -112, 0, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, 0, -112, -112, -112, -112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -112, -112, -112, 0, 0,
        // State 133
        0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 134
        -144, 0, 0, 0, 0, 0, 0, -144, 0, -144, 0, 0, 0, 0, 0, -144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -144, 0, 0, 0, 0, -144, -144, 0, 0, 0, 0, -144, 0, -144, 0, 0, -144, 0, 0, -144, 0, 0, 0, 0, 0, 0, 0, 0, -144,
        // State 135
        0, 0, 0, 0, 0, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 136
        0, 0, 0, 0, 0, 0, 0, 0, -84, 0, 0, 0, 0, 0, -84, 0, 0, 0, 0, 0, 0, 0, 0, -84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 137
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 138
        -83, 0, 0, 0, 0, 0, 0, -83, 0, -83, 0, 0, 0, 0, 0, -83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, 0, 0, 0, 0, -83, -83, 0, 0, 0, 0, -83, 0, -83, 0, 0, -83, 0, 0, -83, 0, 0, 0, 0, 0, 0, 0, 0, -83,
        // State 139
        -82, 0, 0, 0, 0, 0, 0, -82, 0, -82, 0, 0, 0, 0, 0, -82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, 0, 0, 0, 0, -82, -82, 0, 0, 0, 0, -82, 0, -82, 0, 0, -82, 0, 0, -82, 0, 0, 0, 0, 0, 0, 0, 0, -82,
        // State 140
        -68, 0, 0, 0, 0, 0, 0, -68, 0, -68, 0, 0, 0, 0, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, 0, 0, 0, 0, -68, -68, 0, 0, 0, 0, -68, 0, -68, 0, 0, -68, 0, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, -68,
        // State 141
        -66, 0, 0, 0, 0, 0, 0, -66, 0, -66, 0, 0, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, 0, 0, 0, -66, -66, 0, 0, 0, 0, -66, 0, -66, 0, 0, -66, 0, 0, -66, 0, 0, 0, 0, 0, 0, 0, 0, -66,
        // State 142
        -67, 0, 0, 0, 0, 0, 0, -67, 0, -67, 0, 0, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -67, 0, 0, 0, 0, -67, -67, 0, 0, 0, 0, -67, 0, -67, 0, 0, -67, 0, 0, -67, 0, 0, 0, 0, 0, 0, 0, 0, -67,
        // State 143
        -69, 0, 0, 0, 0, 0, 0, -69, 0, -69, 0, 0, 0, 0, 0, -69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -69, 0, 0, 0, 0, -69, -69, 0, 0, 0, 0, -69, 0, -69, 0, 0, -69, 0, 0, -69, 0, 0, 0, 0, 0, 0, 0, 0, -69,
        // State 144
        -70, 0, 0, 0, 0, 0, 0, -70, 0, -70, 0, 0, 0, 0, 0, -70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -70, 0, 0, 0, 0, -70, -70, 0, 0, 0, 0, -70, 0, -70, 0, 0, -70, 0, 0, -70, 0, 0, 0, 0, 0, 0, 0, 0, -70,
        // State 145
        -71, 0, 0, 0, 0, 0, 0, -71, 0, -71, 0, 0, 0, 0, 0, -71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -71, 0, 0, 0, 0, -71, -71, 0, 0, 0, 0, -71, 0, -71, 0, 0, -71, 0, 0, -71, 0, 0, 0, 0, 0, 0, 0, 0, -71,
        // State 146
        -72, 0, 0, 0, 0, 0, 0, -72, 0, -72, 0, 0, 0, 0, 0, -72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -72, 0, 0, 0, 0, -72, -72, 0, 0, 0, 0, -72, 0, -72, 0, 0, -72, 0, 0, -72, 0, 0, 0, 0, 0, 0, 0, 0, -72,
        // State 147
        -73, 0, 0, 0, 0, 0, 0, -73, 0, -73, 0, 0, 0, 0, 0, -73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -73, 0, 0, 0, 0, -73, -73, 0, 0, 0, 0, -73, 0, -73, 0, 0, -73, 0, 0, -73, 0, 0, 0, 0, 0, 0, 0, 0, -73,
        // State 148
        -75, 0, 0, 0, 0, 0, 0, -75, 0, -75, 0, 0, 0, 0, 0, -75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -75, 0, 0, 0, 0, -75, -75, 0, 0, 0, 0, -75, 0, -75, 0, 0, -75, 0, 0, -75, 0, 0, 0, 0, 0, 0, 0, 0, -75,
        // State 149
        -74, 0, 0, 0, 0, 0, 0, -74, 0, -74, 0, 0, 0, 0, 0, -74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -74, 0, 0, 0, 0, -74, -74, 0, 0, 0, 0, -74, 0, -74, 0, 0, -74, 0, 0, -74, 0, 0, 0, 0, 0, 0, 0, 0, -74,
        // State 150
        -76, 0, 0, 0, 0, 0, 0, -76, 0, -76, 0, 0, 0, 0, 0, -76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76, 0, 0, 0, 0, -76, -76, 0, 0, 0, 0, -76, 0, -76, 0, 0, -76, 0, 0, -76, 0, 0, 0, 0, 0, 0, 0, 0, -76,
        // State 151
        -78, 0, 0, 0, 0, 0, 0, -78, 0, -78, 0, 0, 0, 0, 0, -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -78, 0, 0, 0, 0, -78, -78, 0, 0, 0, 0, -78, 0, -78, 0, 0, -78, 0, 0, -78, 0, 0, 0, 0, 0, 0, 0, 0, -78,
        // State 152
        -77, 0, 0, 0, 0, 0, 0, -77, 0, -77, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, -77, -77, 0, 0, 0, 0, -77, 0, -77, 0, 0, -77, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, -77,
        // State 153
        -79, 0, 0, 0, 0, 0, 0, -79, 0, -79, 0, 0, 0, 0, 0, -79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79, 0, 0, 0, 0, -79, -79, 0, 0, 0, 0, -79, 0, -79, 0, 0, -79, 0, 0, -79, 0, 0, 0, 0, 0, 0, 0, 0, -79,
        // State 154
        -80, 0, 0, 0, 0, 0, 0, -80, 0, -80, 0, 0, 0, 0, 0, -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80, 0, 0, 0, 0, -80, -80, 0, 0, 0, 0, -80, 0, -80, 0, 0, -80, 0, 0, -80, 0, 0, 0, 0, 0, 0, 0, 0, -80,
        // State 155
        -81, 0, 0, 0, 0, 0, 0, -81, 0, -81, 0, 0, 0, 0, 0, -81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81, 0, 0, 0, 0, -81, -81, 0, 0, 0, 0, -81, 0, -81, 0, 0, -81, 0, 0, -81, 0, 0, 0, 0, 0, 0, 0, 0, -81,
        // State 156
        0, -56, -56, -56, -56, -56, -56, 0, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, 0, -56, -56, -56, -56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, -56, -56, 0, 0,
        // State 157
        -101, 0, 0, 0, 0, 0, 0, -101, 0, -101, 0, 0, 0, 0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, 0, -101, -101, -101, -101, -101, -101, -101, -101, -101, -101, -101, -101, -101, -101, -101, 0, 0, -101, -101, 0, 0, 0, -101, -101,
        // State 158
        -42, 0, 0, 0, 0, 0, 0, -42, 0, -42, 0, 0, 0, 0, 0, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, 0, 0, 0, 0, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, 0, 0, 0, -42, -42,
        // State 159
        -13, 0, 0, 0, 0, 0, 0, -13, 0, -13, 0, 0, 0, 0, 0, -13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -13, 0, 0, 0, 0, -13, -13, 0, 0, 0, 0, -13, 0, -13, 0, 0, -13, 0, 0, -13, 0, 0, 0, 0, 0, 0, 0, 0, -13,
        // State 160
        -14, 0, 0, 0, 0, 0, 0, -14, 0, -14, 0, 0, 0, 0, 0, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -14, 0, 0, 0, 0, -14, -14, 0, 0, 0, 0, -14, 0, -14, 0, 0, -14, 0, 0, -14, 0, 0, 0, 0, 0, 0, 0, 0, -14,
        // State 161
        -11, 0, 0, 0, 0, 0, 0, -11, 0, -11, 0, 0, 0, 0, 0, -11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -11, 0, 0, 0, 0, -11, -11, 0, 0, 0, 0, -11, 0, -11, 0, 0, -11, 0, 0, -11, 0, 0, 0, 0, 0, 0, 0, 0, -11,
        // State 162
        -9, 0, 0, 0, 0, 0, 0, -9, 0, -9, 0, 0, 0, 0, 0, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, 0, 0, 0, 0, -9, -9, 0, 0, 0, 0, -9, 0, -9, 0, 0, -9, 0, 0, -9, 0, 0, 0, 0, 0, 0, 0, 0, -9,
        // State 163
        -10, 0, 0, 0, 0, 0, 0, -10, 0, -10, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, -10, -10, 0, 0, 0, 0, -10, 0, -10, 0, 0, -10, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, -10,
        // State 164
        -12, 0, 0, 0, 0, 0, 0, -12, 0, -12, 0, 0, 0, 0, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, 0, 0, 0, 0, -12, -12, 0, 0, 0, 0, -12, 0, -12, 0, 0, -12, 0, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, -12,
        // State 165
        -17, 0, 0, 0, 0, 0, 0, -17, 0, -17, 0, 0, 0, 0, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -17, 0, 0, 0, 0, -17, -17, 0, 0, 0, 0, -17, 0, -17, 0, 0, -17, 0, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, -17,
        // State 166
        -8, 0, 0, 0, 0, 0, 0, -8, 0, -8, 0, 0, 0, 0, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, 0, 0, 0, 0, -8, -8, 0, 0, 0, 0, -8, 0, -8, 0, 0, -8, 0, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0, -8,
        // State 167
        -18, 0, 0, 0, 0, 0, 0, -18, 0, -18, 0, 0, 0, 0, 0, -18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -18, 0, 0, 0, 0, -18, -18, 0, 0, 0, 0, -18, 0, -18, 0, 0, -18, 0, 0, -18, 0, 0, 0, 0, 0, 0, 0, 0, -18,
        // State 168
        -15, 0, 0, 0, 0, 0, 0, -15, 0, -15, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, -15, -15, 0, 0, 0, 0, -15, 0, -15, 0, 0, -15, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, -15,
        // State 169
        -16, 0, 0, 0, 0, 0, 0, -16, 0, -16, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, -16, -16, 0, 0, 0, 0, -16, 0, -16, 0, 0, -16, 0, 0, -16, 0, 0, 0, 0, 0, 0, 0, 0, -16,
        // State 170
        0, -119, -119, -119, -119, -119, -119, 0, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, 0, 0, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, 0, 0, -119, -119, -119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -119, -119, -119, 0, 0,
        // State 171
        0, -89, -89, -89, -89, -89, -89, 0, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, 0, 0, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, 0, 0, -89, -89, -89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, -89, -89, 0, 0,
        // State 172
        0, -90, -90, -90, -90, -90, -90, 0, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, 0, 0, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, 0, 0, -90, -90, -90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, -90, -90, 0, 0,
        // State 173
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -106, 0,
        // State 174
        0, 0, 0, 0, 0, 0, 0, 0, -95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -95, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 175
        0, -22, -22, 0, -22, -22, 0, 0, -22, -22, 0, -22, 0, 0, -22, -22, 0, 0, 0, 0, -22, 0, -22, -22, -22, -22, 0, -22, 0, -22, -22, -22, -22, 0, -22, 0, 0, -22, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, -22, 0, 0,
        // State 176
        0, -21, -21, 0, -21, -21, 0, 0, -21, -21, 0, -21, 0, 0, -21, -21, 0, 0, 0, 0, -21, 0, -21, -21, -21, -21, 0, -21, 0, -21, -21, -21, -21, 0, -21, 0, 0, -21, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, -21, 0, 0,
        // State 177
        0, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 178
        0, -107, -107, -107, -107, -107, -107, 0, -107, -107, -107, -107, 0, -107, -107, -107, 0, -107, 0, 0, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, 0, 0, -107, -107, -107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -107, -107, -107, 0, 0,
        // State 179
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 180
        -103, 0, 0, 0, 0, 0, 0, -103, 0, -103, 0, 0, 0, 0, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, 0, -103, -103, -103, -103, -103, -103, -103, -103, -103, -103, -103, -103, -103, -103, -103, 0, 0, -103, -103, 0, 0, 0, -103, -103,
        // State 181
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -86, 0, 0, 0, 0, 0,
        // State 182
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, -94, 0, 0, 0, 0, 0, -94, 0, 0, -94, 0, -94, -94, 0, 0, 0, 0, 0, 0, 0,
        // State 183
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, 0,
        // State 184
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 185
        0, -26, -26, 0, -26, -26, 0, 0, -26, -26, 0, -26, 0, 0, -26, -26, 0, 0, 0, 0, -26, 0, -26, -26, -26, -26, 0, -26, 0, -26, -26, -26, -26, 0, -26, 0, 0, -26, -26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, 0, -26, 0, 0,
        // State 186
        0, -4, -4, -4, -4, -4, -4, 0, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, 0, -4, -4, -4, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, -4, -4, 0, 0,
        // State 187
        0, 0, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 188
        0, -117, -117, -117, -117, -117, -117, 0, -117, -117, -117, -117, -117, -117, -117, -117, -117, -117, -117, -117, -117, -117, -117, -117, -117, -117, -117, -117, -117, -117, -117, -117, -117, -117, -117, 0, -117, -117, -117, -117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117, -117, -117, 0, 0,
        // State 189
        0, -116, -116, -116, -116, -116, -116, 0, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, 0, -116, -116, -116, -116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116, -116, -116, 0, 0,
        // State 190
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 191
        0, -114, -114, -114, -114, -114, -114, 0, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, 0, -114, -114, -114, -114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114, -114, -114, 0, 0,
        // State 192
        0, 0, 0, 0, 0, 0, 0, 0, 205, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 193
        0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 194
        0, 0, 0, 0, 0, 0, 0, 0, 206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 195
        0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 196
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 197
        0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 198
        -102, 0, 0, 0, 0, 0, 0, -102, 0, -102, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, -102, -102, -102, -102, -102, -102, -102, -102, -102, -102, -102, -102, -102, -102, -102, 0, 0, -102, -102, 0, 0, 0, -102, -102,
        // State 199
        0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 200
        0, 0, 0, 0, 0, 0, 0, 0, -88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 201
        0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 202
        0, -118, -118, -118, -118, -118, -118, 0, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, 0, -118, -118, -118, -118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -118, -118, -118, 0, 0,
        // State 203
        0, 0, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 204
        0, -58, -58, -58, -58, -58, -58, 0, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, 0, -58, -58, -58, -58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, -58, -58, 0, 0,
        // State 205
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 206
        0, 0, 0, 0, 0, 0, 0, 0, -135, 0, 0, 0, 0, 0, -135, 0, 0, 0, 0, 0, 0, 0, -135, -135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 207
        0, -5, -5, -5, -5, -5, -5, 0, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, 0, -5, -5, -5, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, -5, -5, 0, 0,
        // State 208
        0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 209
        -104, 0, 0, 0, 0, 0, 0, -104, 0, -104, 0, 0, 0, 0, 0, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0, 0, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, 0, 0, -104, -104, 0, 0, 0, -104, -104,
        // State 210
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 211
        -61, 0, 0, 0, 0, 0, 0, -61, 0, -61, 0, 0, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, 0, 0, 0, -61, -61, -61, -61, -61, 78, -61, -61, -61, -61, -61, -61, -61, -61, -61, 0, 0, -61, -61, 0, 0, 0, -61, -61,
        // State 212
        -62, 0, 0, 0, 0, 0, 0, -62, 0, -62, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, -62, -62, -62, -62, -62, 0, -62, -62, -62, -62, -62, -62, -62, -62, -62, 0, 0, -62, -62, 0, 0, 0, -62, -62,
        // State 213
        -46, 0, 0, 0, 0, 0, 0, -46, 0, -46, 0, 0, 0, 0, 0, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, 0, 0, 0, 0, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, 0, 0, -46, -46, 0, 0, 0, -46, -46,
        // State 214
        -64, 0, 0, 0, 0, 0, 0, -64, 0, -64, 0, 0, 0, 0, 0, -64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -64, 0, 0, 0, 0, -64, -64, -64, -64, -64, 0, -64, -64, -64, -64, -64, -64, -64, -64, -64, 0, 0, -64, -64, 0, 0, 0, -64, -64,
        // State 215
        0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 216
        0, -57, -57, -57, -57, -57, -57, 0, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, 0, -57, -57, -57, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, -57, -57, 0, 0,
        // State 217
        0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 218
        -45, 0, 0, 0, 0, 0, 0, -45, 0, -45, 0, 0, 0, 0, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, 0, 0, 0, 0, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, 0, 0, -45, -45, 0, 0, 0, -45, -45,
        // State 219
        -63, 0, 0, 0, 0, 0, 0, -63, 0, -63, 0, 0, 0, 0, 0, -63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -63, 0, 0, 0, 0, -63, -63, -63, -63, -63, 0, -63, -63, -63, -63, -63, -63, -63, -63, -63, 0, 0, -63, -63, 0, 0, 0, -63, -63,
        // State 220
        -47, 0, 0, 0, 0, 0, 0, -47, 0, -47, 0, 0, 0, 0, 0, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -47, 0, 0, 0, 0, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, 0, 0, -47, -47, 0, 0, 0, -47, -47,
        // State 221
        -65, 0, 0, 0, 0, 0, 0, -65, 0, -65, 0, 0, 0, 0, 0, -65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, 0, 0, 0, 0, -65, -65, -65, -65, -65, 0, -65, -65, -65, -65, -65, -65, -65, -65, -65, 0, 0, -65, -65, 0, 0, 0, -65, -65,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 64 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        -131,
        // State 1
        0,
        // State 2
        -132,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        0,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        0,
        // State 54
        0,
        // State 55
        0,
        // State 56
        0,
        // State 57
        0,
        // State 58
        0,
        // State 59
        0,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        0,
        // State 65
        0,
        // State 66
        0,
        // State 67
        0,
        // State 68
        0,
        // State 69
        0,
        // State 70
        0,
        // State 71
        0,
        // State 72
        0,
        // State 73
        0,
        // State 74
        0,
        // State 75
        0,
        // State 76
        0,
        // State 77
        0,
        // State 78
        0,
        // State 79
        0,
        // State 80
        -122,
        // State 81
        -125,
        // State 82
        -126,
        // State 83
        -123,
        // State 84
        -129,
        // State 85
        -146,
        // State 86
        0,
        // State 87
        -124,
        // State 88
        0,
        // State 89
        0,
        // State 90
        0,
        // State 91
        0,
        // State 92
        0,
        // State 93
        -130,
        // State 94
        0,
        // State 95
        0,
        // State 96
        0,
        // State 97
        0,
        // State 98
        0,
        // State 99
        0,
        // State 100
        -93,
        // State 101
        0,
        // State 102
        0,
        // State 103
        -121,
        // State 104
        -53,
        // State 105
        0,
        // State 106
        0,
        // State 107
        0,
        // State 108
        -142,
        // State 109
        0,
        // State 110
        0,
        // State 111
        0,
        // State 112
        0,
        // State 113
        0,
        // State 114
        0,
        // State 115
        0,
        // State 116
        0,
        // State 117
        0,
        // State 118
        0,
        // State 119
        0,
        // State 120
        0,
        // State 121
        0,
        // State 122
        0,
        // State 123
        0,
        // State 124
        0,
        // State 125
        0,
        // State 126
        0,
        // State 127
        0,
        // State 128
        0,
        // State 129
        0,
        // State 130
        0,
        // State 131
        0,
        // State 132
        0,
        // State 133
        0,
        // State 134
        0,
        // State 135
        0,
        // State 136
        0,
        // State 137
        0,
        // State 138
        0,
        // State 139
        0,
        // State 140
        0,
        // State 141
        0,
        // State 142
        0,
        // State 143
        0,
        // State 144
        0,
        // State 145
        0,
        // State 146
        0,
        // State 147
        0,
        // State 148
        0,
        // State 149
        0,
        // State 150
        0,
        // State 151
        0,
        // State 152
        0,
        // State 153
        0,
        // State 154
        0,
        // State 155
        0,
        // State 156
        0,
        // State 157
        0,
        // State 158
        -42,
        // State 159
        0,
        // State 160
        0,
        // State 161
        0,
        // State 162
        0,
        // State 163
        0,
        // State 164
        0,
        // State 165
        0,
        // State 166
        0,
        // State 167
        0,
        // State 168
        0,
        // State 169
        0,
        // State 170
        0,
        // State 171
        0,
        // State 172
        0,
        // State 173
        0,
        // State 174
        0,
        // State 175
        0,
        // State 176
        0,
        // State 177
        0,
        // State 178
        0,
        // State 179
        0,
        // State 180
        0,
        // State 181
        0,
        // State 182
        -94,
        // State 183
        0,
        // State 184
        0,
        // State 185
        0,
        // State 186
        0,
        // State 187
        0,
        // State 188
        0,
        // State 189
        0,
        // State 190
        0,
        // State 191
        0,
        // State 192
        0,
        // State 193
        0,
        // State 194
        0,
        // State 195
        0,
        // State 196
        0,
        // State 197
        0,
        // State 198
        0,
        // State 199
        0,
        // State 200
        0,
        // State 201
        0,
        // State 202
        0,
        // State 203
        0,
        // State 204
        0,
        // State 205
        0,
        // State 206
        0,
        // State 207
        0,
        // State 208
        0,
        // State 209
        0,
        // State 210
        0,
        // State 211
        0,
        // State 212
        0,
        // State 213
        0,
        // State 214
        0,
        // State 215
        0,
        // State 216
        0,
        // State 217
        0,
        // State 218
        0,
        // State 219
        0,
        // State 220
        0,
        // State 221
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            0 => match state {
                6 => 101,
                7 => 102,
                13 => 136,
                48 => 188,
                49 => 189,
                _ => 96,
            },
            2 => 156,
            3 => match state {
                75 => 215,
                _ => 201,
            },
            4 => 47,
            5 => 14,
            6 => 109,
            7 => match state {
                29 => 175,
                38 => 185,
                _ => 110,
            },
            8 => match state {
                35 => 58,
                _ => 15,
            },
            9 => match state {
                39 => 60,
                _ => 16,
            },
            10 => match state {
                40 => 61,
                _ => 17,
            },
            11 => match state {
                41 => 62,
                _ => 18,
            },
            12 => match state {
                42 => 63,
                _ => 19,
            },
            13 => match state {
                43 => 64,
                _ => 20,
            },
            14 => match state {
                44 => 65,
                _ => 21,
            },
            15 => match state {
                45 => 66,
                _ => 22,
            },
            16 => match state {
                37 => 59,
                _ => 23,
            },
            17 => match state {
                8 => 103,
                _ => 111,
            },
            18 => match state {
                73 => 211,
                74 => 213,
                77 => 218,
                78 => 220,
                _ => 112,
            },
            19 => match state {
                3 | 6..=7 | 13 | 48..=49 => 97,
                _ => 79,
            },
            20 => match state {
                46 => 67,
                70 => 75,
                30 => 177,
                32 => 179,
                36 => 184,
                47 => 187,
                50 => 190,
                53 => 194,
                55 => 197,
                56 => 199,
                68 => 203,
                69 => 206,
                71 => 208,
                72 => 210,
                _ => 113,
            },
            22 => 80,
            23 => match state {
                34 => 183,
                _ => 106,
            },
            24 => 114,
            25 => match state {
                1 => 5,
                3 | 6..=7 | 13 | 48..=49 => 98,
                28 => 174,
                _ => 24,
            },
            26 => 115,
            27 => match state {
                73 => 212,
                74 => 214,
                77 => 219,
                78 => 221,
                _ => 116,
            },
            28 => 38,
            29 => 39,
            30 => 40,
            31 => 41,
            32 => 42,
            33 => 43,
            34 => 44,
            35 => 45,
            36 => 37,
            37 => 35,
            38 => match state {
                9 => 12,
                33 => 57,
                _ => 107,
            },
            39 => 8,
            40 => match state {
                57 => 200,
                _ => 135,
            },
            41 => 170,
            42 => 1,
            43 => 81,
            44 => 82,
            45 => match state {
                54 | 76 => 195,
                _ => 117,
            },
            46 => match state {
                76 => 217,
                _ => 196,
            },
            47 => 118,
            48 => match state {
                27 => 173,
                _ => 119,
            },
            49 => match state {
                11 | 27 | 54 | 73..=74 | 76..=78 => 25,
                31 => 178,
                _ => 176,
            },
            50 => 120,
            51 => 26,
            52 => 83,
            53 => match state {
                2 => 93,
                _ => 84,
            },
            55 => 2,
            56 => 85,
            57 => 27,
            58 => 121,
            59 => match state {
                4 => 6,
                9..=10 | 33..=34 => 13,
                0 | 2 => 86,
                51 => 192,
                52 => 193,
                _ => 28,
            },
            60 => 87,
            61 => 29,
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###""!""###,
        r###""!=""###,
        r###""%""###,
        r###""%=""###,
        r###""&""###,
        r###""&&""###,
        r###""&=""###,
        r###""(""###,
        r###"")""###,
        r###""*""###,
        r###""*=""###,
        r###""+""###,
        r###""++""###,
        r###""+=""###,
        r###"",""###,
        r###""-""###,
        r###""--""###,
        r###""-=""###,
        r###""->""###,
        r###"".""###,
        r###""/""###,
        r###""/=""###,
        r###"":""###,
        r###"";""###,
        r###""<""###,
        r###""<<""###,
        r###""<<=""###,
        r###""<=""###,
        r###""=""###,
        r###""==""###,
        r###"">""###,
        r###"">=""###,
        r###"">>""###,
        r###"">>=""###,
        r###""?""###,
        r###""NULL""###,
        r###""[""###,
        r###""]""###,
        r###""^""###,
        r###""^=""###,
        r###""alloc""###,
        r###""alloc_array""###,
        r###""assert""###,
        r###""bool""###,
        r###""declaredident""###,
        r###""else""###,
        r###""false""###,
        r###""for""###,
        r###""ident""###,
        r###""if""###,
        r###""int""###,
        r###""number""###,
        r###""return""###,
        r###""struct""###,
        r###""true""###,
        r###""typedef""###,
        r###""void""###,
        r###""while""###,
        r###""{""###,
        r###""|""###,
        r###""|=""###,
        r###""||""###,
        r###""}""###,
        r###""~""###,
    ];
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'input,
    >(
        __states: &[i16],
        _: core::marker::PhantomData<(&'input ())>,
    ) -> alloc::vec::Vec<alloc::string::String>
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&())>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    struct __StateMachine<'input>
    where 
    {
        __phantom: core::marker::PhantomData<(&'input ())>,
    }
    impl<'input> __state_machine::ParserDefinition for __StateMachine<'input>
    where 
    {
        type Location = usize;
        type Error = String;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = SurfaceProgram;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 64 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i16]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&())>)
        }
    }
    fn __token_to_integer<
        'input,
    >(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Not if true => Some(0),
            Token::Neq if true => Some(1),
            Token::Mod if true => Some(2),
            Token::ModEq if true => Some(3),
            Token::BitAnd if true => Some(4),
            Token::And if true => Some(5),
            Token::AndEq if true => Some(6),
            Token::LParen if true => Some(7),
            Token::RParen if true => Some(8),
            Token::Asterisk if true => Some(9),
            Token::TimesEq if true => Some(10),
            Token::Plus if true => Some(11),
            Token::PlusPlus if true => Some(12),
            Token::PlusEq if true => Some(13),
            Token::COMMA if true => Some(14),
            Token::Minus if true => Some(15),
            Token::MinusMinus if true => Some(16),
            Token::MinusEq if true => Some(17),
            Token::FieldDeref if true => Some(18),
            Token::FieldSelect if true => Some(19),
            Token::Div if true => Some(20),
            Token::DivEq if true => Some(21),
            Token::Colon if true => Some(22),
            Token::Semicolon if true => Some(23),
            Token::LessThan if true => Some(24),
            Token::Shl if true => Some(25),
            Token::ShlEq if true => Some(26),
            Token::Leq if true => Some(27),
            Token::Assgn if true => Some(28),
            Token::Eq if true => Some(29),
            Token::GreaterThan if true => Some(30),
            Token::Geq if true => Some(31),
            Token::Shr if true => Some(32),
            Token::ShrEq if true => Some(33),
            Token::QuestionMark if true => Some(34),
            Token::NULL if true => Some(35),
            Token::LBracket if true => Some(36),
            Token::RBracket if true => Some(37),
            Token::BitXor if true => Some(38),
            Token::XorEq if true => Some(39),
            Token::ALLOC if true => Some(40),
            Token::ALLOC_ARRAY if true => Some(41),
            Token::ASSERT if true => Some(42),
            Token::Bool if true => Some(43),
            Token::DeclaredIdent(_) if true => Some(44),
            Token::ELSE if true => Some(45),
            Token::FALSE if true => Some(46),
            Token::FOR if true => Some(47),
            Token::Ident(_) if true => Some(48),
            Token::IF if true => Some(49),
            Token::Int if true => Some(50),
            Token::Number(i64) if true => Some(51),
            Token::Return if true => Some(52),
            Token::Struct if true => Some(53),
            Token::TRUE if true => Some(54),
            Token::Typedef if true => Some(55),
            Token::Void if true => Some(56),
            Token::WHILE if true => Some(57),
            Token::LBrace if true => Some(58),
            Token::BitOr if true => Some(59),
            Token::OrEq if true => Some(60),
            Token::Or if true => Some(61),
            Token::RBrace if true => Some(62),
            Token::BitNot if true => Some(63),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
    >(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __Symbol<'input>
    {
        #[allow(clippy::manual_range_patterns)]match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 45 | 46 | 47 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 => __Symbol::Variant0(__token),
            44 | 48 => match __token {
                Token::DeclaredIdent(__tok0) | Token::Ident(__tok0) if true => __Symbol::Variant1(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'input,
    >(
        __reduce_index: i16,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'input>>
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 0,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 3,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 5,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 5,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 7,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 8,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 9,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 10,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 11,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 12,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 12,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 13,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 14,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 14,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 15,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 16,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 17,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 18,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 18,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 18,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 21,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 22,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 23,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 23,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 24,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 24,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 24,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 27,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 27,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 27,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 27,
                }
            }
            64 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 27,
                }
            }
            65 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            66 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            67 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            68 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            69 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            70 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            71 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            72 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            73 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            74 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            75 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            76 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            77 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            78 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            79 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            80 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            81 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            82 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            83 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 38,
                }
            }
            84 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 39,
                }
            }
            85 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 39,
                }
            }
            86 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 40,
                }
            }
            87 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 40,
                }
            }
            88 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            89 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            90 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            91 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            92 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 43,
                }
            }
            93 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 44,
                }
            }
            94 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 45,
                }
            }
            95 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 45,
                }
            }
            96 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 45,
                }
            }
            97 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 45,
                }
            }
            98 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 46,
                }
            }
            99 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 46,
                }
            }
            100 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 47,
                }
            }
            101 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 47,
                }
            }
            102 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 47,
                }
            }
            103 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 47,
                }
            }
            104 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 48,
                }
            }
            105 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 48,
                }
            }
            106 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 49,
                }
            }
            107 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            108 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            109 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            110 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            111 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            112 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            113 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            114 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            115 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            116 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            117 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 50,
                }
            }
            118 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 51,
                }
            }
            119 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 51,
                }
            }
            120 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 52,
                }
            }
            121 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 53,
                }
            }
            122 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 53,
                }
            }
            123 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 53,
                }
            }
            124 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 53,
                }
            }
            125 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 53,
                }
            }
            126 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 54,
                }
            }
            127 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 54,
                }
            }
            128 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 55,
                }
            }
            129 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 55,
                }
            }
            130 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 56,
                }
            }
            131 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 56,
                }
            }
            132 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 57,
                }
            }
            133 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 57,
                }
            }
            134 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 58,
                }
            }
            135 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 59,
                }
            }
            136 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 59,
                }
            }
            137 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 59,
                }
            }
            138 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 59,
                }
            }
            139 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 59,
                }
            }
            140 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 59,
                }
            }
            141 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 60,
                }
            }
            142 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 61,
                }
            }
            143 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 61,
                }
            }
            144 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 61,
                }
            }
            145 => __state_machine::SimulatedReduce::Accept,
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct SurfaceProgramParser {
        _priv: (),
    }

    impl Default for SurfaceProgramParser { fn default() -> Self { Self::new() } }
    impl SurfaceProgramParser {
        pub fn new() -> SurfaceProgramParser {
            SurfaceProgramParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
            __TOKEN: __ToTriple<'input, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            __tokens0: __TOKENS,
        ) -> Result<SurfaceProgram, __lalrpop_util::ParseError<usize, Token<'input>, String>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    __phantom: core::marker::PhantomData::<(&())>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'input,
    >(
        __error_state: Option<i16>,
        __states: &[i16],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> bool
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&())>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    fn __reduce<
        'input,
    >(
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<Result<SurfaceProgram,__lalrpop_util::ParseError<usize, Token<'input>, String>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1 => {
                __reduce1(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            2 => {
                __reduce2(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            3 => {
                __reduce3(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            4 => {
                __reduce4(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            5 => {
                __reduce5(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            6 => {
                __reduce6(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            7 => {
                __reduce7(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            8 => {
                __reduce8(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            9 => {
                __reduce9(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            10 => {
                __reduce10(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            11 => {
                __reduce11(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            12 => {
                __reduce12(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            13 => {
                __reduce13(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            14 => {
                __reduce14(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            15 => {
                __reduce15(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            16 => {
                __reduce16(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            17 => {
                __reduce17(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            18 => {
                __reduce18(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            19 => {
                __reduce19(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            20 => {
                __reduce20(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            21 => {
                __reduce21(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            22 => {
                __reduce22(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            23 => {
                __reduce23(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            24 => {
                __reduce24(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            25 => {
                __reduce25(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            26 => {
                __reduce26(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            27 => {
                __reduce27(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            28 => {
                __reduce28(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            29 => {
                __reduce29(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            30 => {
                __reduce30(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            31 => {
                __reduce31(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            32 => {
                __reduce32(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            33 => {
                __reduce33(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            34 => {
                __reduce34(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            35 => {
                __reduce35(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            36 => {
                __reduce36(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            37 => {
                __reduce37(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            38 => {
                __reduce38(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            39 => {
                __reduce39(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            40 => {
                __reduce40(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            41 => {
                __reduce41(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            42 => {
                __reduce42(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            43 => {
                __reduce43(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            44 => {
                __reduce44(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            45 => {
                __reduce45(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            46 => {
                __reduce46(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            47 => {
                __reduce47(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            48 => {
                __reduce48(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            49 => {
                __reduce49(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            50 => {
                __reduce50(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            51 => {
                __reduce51(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            52 => {
                __reduce52(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            53 => {
                __reduce53(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            54 => {
                __reduce54(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            55 => {
                __reduce55(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            56 => {
                __reduce56(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            57 => {
                __reduce57(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            58 => {
                __reduce58(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            59 => {
                __reduce59(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            60 => {
                __reduce60(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            61 => {
                __reduce61(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            62 => {
                __reduce62(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            63 => {
                __reduce63(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            64 => {
                __reduce64(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            65 => {
                __reduce65(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            66 => {
                __reduce66(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            67 => {
                __reduce67(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            68 => {
                __reduce68(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            69 => {
                __reduce69(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            70 => {
                __reduce70(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            71 => {
                __reduce71(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            72 => {
                __reduce72(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            73 => {
                __reduce73(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            74 => {
                __reduce74(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            75 => {
                __reduce75(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            76 => {
                __reduce76(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            77 => {
                __reduce77(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            78 => {
                __reduce78(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            79 => {
                __reduce79(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            80 => {
                __reduce80(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            81 => {
                __reduce81(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            82 => {
                __reduce82(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            83 => {
                __reduce83(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            84 => {
                __reduce84(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            85 => {
                __reduce85(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            86 => {
                __reduce86(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            87 => {
                __reduce87(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            88 => {
                __reduce88(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            89 => {
                __reduce89(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            90 => {
                __reduce90(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            91 => {
                __reduce91(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            92 => {
                __reduce92(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            93 => {
                __reduce93(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            94 => {
                __reduce94(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            95 => {
                __reduce95(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            96 => {
                __reduce96(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            97 => {
                __reduce97(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            98 => {
                __reduce98(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            99 => {
                __reduce99(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            100 => {
                __reduce100(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            101 => {
                __reduce101(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            102 => {
                __reduce102(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            103 => {
                __reduce103(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            104 => {
                __reduce104(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            105 => {
                __reduce105(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            106 => {
                __reduce106(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            107 => {
                __reduce107(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            108 => {
                __reduce108(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            109 => {
                __reduce109(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            110 => {
                __reduce110(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            111 => {
                __reduce111(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            112 => {
                __reduce112(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            113 => {
                __reduce113(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            114 => {
                __reduce114(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            115 => {
                __reduce115(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            116 => {
                __reduce116(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            117 => {
                __reduce117(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            118 => {
                __reduce118(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            119 => {
                __reduce119(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            120 => {
                __reduce120(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            121 => {
                __reduce121(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            122 => {
                __reduce122(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            123 => {
                __reduce123(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            124 => {
                __reduce124(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            125 => {
                __reduce125(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            126 => {
                __reduce126(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            127 => {
                __reduce127(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            128 => {
                __reduce128(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            129 => {
                __reduce129(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            130 => {
                __reduce130(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            131 => {
                __reduce131(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            132 => {
                __reduce132(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            133 => {
                __reduce133(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            134 => {
                __reduce134(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            135 => {
                __reduce135(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            136 => {
                __reduce136(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            137 => {
                __reduce137(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            138 => {
                __reduce138(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            139 => {
                __reduce139(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            140 => {
                __reduce140(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            141 => {
                __reduce141(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            142 => {
                __reduce142(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            143 => {
                __reduce143(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            144 => {
                __reduce144(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            145 => {
                // __SurfaceProgram = SurfaceProgram => ActionFn(0);
                let __sym0 = __pop_Variant23(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action0::<>(__sym0);
                return Some(Ok(__nt));
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Arg, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ArgList, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, AsnOp, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, BinOp, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Expr, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Fdecl, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Box<SurfaceStmt>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Param, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ParamList, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, PostOp, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ReturnType, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Sdecl, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Sdefn, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, String, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, SurfaceFdefn, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, SurfaceGdecl, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, SurfaceProgram, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, SurfaceStmt, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Token<'input>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Typ, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Typedef, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, UnOp, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<SurfaceStmt>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<SurfaceGdecl>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Expr>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, i64, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, &'input str, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __reduce0<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AllIdent = Ident => ActionFn(133);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action133::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 0)
    }
    fn __reduce1<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AllIdent = DeclaredIdent => ActionFn(134);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action134::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 0)
    }
    fn __reduce2<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Arg = Expr => ActionFn(45);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 1)
    }
    fn __reduce3<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ArgList = "(", ")" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action46::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 2)
    }
    fn __reduce4<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ArgList = "(", Expr, ArgListFollow, ")" => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action47::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 2)
    }
    fn __reduce5<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ArgListFollow =  => ActionFn(48);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action48::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (0, 3)
    }
    fn __reduce6<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ArgListFollow = ",", Expr, ArgListFollow => ActionFn(49);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action49::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 3)
    }
    fn __reduce7<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AsnOp = "=" => ActionFn(122);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action122::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 4)
    }
    fn __reduce8<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AsnOp = "+=" => ActionFn(123);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action123::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 4)
    }
    fn __reduce9<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AsnOp = "-=" => ActionFn(124);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action124::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 4)
    }
    fn __reduce10<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AsnOp = "*=" => ActionFn(125);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action125::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 4)
    }
    fn __reduce11<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AsnOp = "/=" => ActionFn(126);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action126::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 4)
    }
    fn __reduce12<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AsnOp = "%=" => ActionFn(127);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action127::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 4)
    }
    fn __reduce13<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AsnOp = "&=" => ActionFn(128);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action128::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 4)
    }
    fn __reduce14<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AsnOp = "^=" => ActionFn(129);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action129::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 4)
    }
    fn __reduce15<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AsnOp = "|=" => ActionFn(130);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action130::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 4)
    }
    fn __reduce16<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AsnOp = "<<=" => ActionFn(131);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action131::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 4)
    }
    fn __reduce17<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // AsnOp = ">>=" => ActionFn(132);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action132::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 4)
    }
    fn __reduce18<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr = BasicExpr, Order9BinOp, BasicExpr10 => ActionFn(91);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action91::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 5)
    }
    fn __reduce19<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr = BasicExpr10 => ActionFn(92);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action92::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 5)
    }
    fn __reduce20<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr0 = SubExp => ActionFn(70);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action70::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 6)
    }
    fn __reduce21<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr1 = UnOp, BasicExpr1 => ActionFn(71);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action71::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    fn __reduce22<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr1 = BasicExpr0 => ActionFn(72);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action72::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    fn __reduce23<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr10 = BasicExpr10, Order8BinOp, BasicExpr9 => ActionFn(89);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action89::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 8)
    }
    fn __reduce24<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr10 = BasicExpr9 => ActionFn(90);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action90::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    fn __reduce25<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr2 = BasicExpr2, Order0BinOp, BasicExpr1 => ActionFn(73);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action73::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 9)
    }
    fn __reduce26<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr2 = BasicExpr1 => ActionFn(74);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action74::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    fn __reduce27<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr3 = BasicExpr3, Order1BinOp, BasicExpr2 => ActionFn(75);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action75::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 10)
    }
    fn __reduce28<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr3 = BasicExpr2 => ActionFn(76);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action76::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 10)
    }
    fn __reduce29<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr4 = BasicExpr4, Order2BinOp, BasicExpr3 => ActionFn(77);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action77::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 11)
    }
    fn __reduce30<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr4 = BasicExpr3 => ActionFn(78);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action78::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 11)
    }
    fn __reduce31<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr5 = BasicExpr5, Order3BinOp, BasicExpr4 => ActionFn(79);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action79::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 12)
    }
    fn __reduce32<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr5 = BasicExpr4 => ActionFn(80);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action80::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 12)
    }
    fn __reduce33<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr6 = BasicExpr6, Order4BinOp, BasicExpr5 => ActionFn(81);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action81::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 13)
    }
    fn __reduce34<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr6 = BasicExpr5 => ActionFn(82);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action82::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 13)
    }
    fn __reduce35<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr7 = BasicExpr7, Order5BinOp, BasicExpr6 => ActionFn(83);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action83::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 14)
    }
    fn __reduce36<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr7 = BasicExpr6 => ActionFn(84);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action84::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 14)
    }
    fn __reduce37<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr8 = BasicExpr8, Order6BinOp, BasicExpr7 => ActionFn(85);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action85::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 15)
    }
    fn __reduce38<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr8 = BasicExpr7 => ActionFn(86);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action86::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 15)
    }
    fn __reduce39<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr9 = BasicExpr9, Order7BinOp, BasicExpr8 => ActionFn(87);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action87::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 16)
    }
    fn __reduce40<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BasicExpr9 = BasicExpr8 => ActionFn(88);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action88::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    fn __reduce41<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Block = "{", Stmts, "}" => ActionFn(21);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action21::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 17)
    }
    fn __reduce42<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ClosedStmt = SimpStmt => ActionFn(31);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 18)
    }
    fn __reduce43<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ClosedStmt = Block => ActionFn(32);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action32::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 18)
    }
    fn __reduce44<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ClosedStmt = "if", "(", Expr, ")", ClosedStmt, "else", ClosedStmt => ActionFn(33);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant7(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action33::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (7, 18)
    }
    fn __reduce45<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ClosedStmt = "while", "(", Expr, ")", ClosedStmt => ActionFn(34);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant7(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action34::<>(__sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (5, 18)
    }
    fn __reduce46<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ClosedStmt = "for", "(", SimpOpt, ";", Expr, ";", SimpOpt, ")", ClosedStmt => ActionFn(35);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant7(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant18(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant6(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant18(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action35::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (9, 18)
    }
    fn __reduce47<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DeclaredIdent = "declaredident" => ActionFn(136);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action136::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 19)
    }
    fn __reduce48<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr = BasicExpr => ActionFn(50);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 20)
    }
    fn __reduce49<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr = TernaryExpr => ActionFn(51);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 20)
    }
    fn __reduce50<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr? = Expr => ActionFn(138);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action138::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 21)
    }
    fn __reduce51<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr? =  => ActionFn(139);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action139::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 21)
    }
    fn __reduce52<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Fdecl = ReturnType, Ident, ParamList, ";" => ActionFn(7);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action7::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (4, 22)
    }
    fn __reduce53<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldList =  => ActionFn(19);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action19::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 23)
    }
    fn __reduce54<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldList = Param, ";", FieldList => ActionFn(20);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action20::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 23)
    }
    fn __reduce55<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FunctionCall = Ident, ArgList => ActionFn(52);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action52::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 24)
    }
    fn __reduce56<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FunctionCall = "alloc_array", "(", Typ, ",", Expr, ")" => ActionFn(53);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant6(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant24(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action53::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (6, 24)
    }
    fn __reduce57<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FunctionCall = "alloc", "(", Typ, ")" => ActionFn(54);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant24(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action54::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 24)
    }
    fn __reduce58<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = "ident" => ActionFn(135);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action135::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 25)
    }
    fn __reduce59<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Number = "number" => ActionFn(137);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action137::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 26)
    }
    fn __reduce60<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OpenStmt = "if", "(", Expr, ")", ClosedStmt => ActionFn(26);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant7(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action26::<>(__sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (5, 27)
    }
    fn __reduce61<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OpenStmt = "if", "(", Expr, ")", OpenStmt => ActionFn(27);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant7(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action27::<>(__sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (5, 27)
    }
    fn __reduce62<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OpenStmt = "if", "(", Expr, ")", ClosedStmt, "else", OpenStmt => ActionFn(28);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant7(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action28::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (7, 27)
    }
    fn __reduce63<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OpenStmt = "while", "(", Expr, ")", OpenStmt => ActionFn(29);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant7(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action29::<>(__sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (5, 27)
    }
    fn __reduce64<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OpenStmt = "for", "(", SimpOpt, ";", Expr, ";", SimpOpt, ")", OpenStmt => ActionFn(30);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant7(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant18(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant6(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant18(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action30::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (9, 27)
    }
    fn __reduce65<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Order0BinOp = "*" => ActionFn(104);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action104::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    fn __reduce66<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Order0BinOp = "/" => ActionFn(105);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action105::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    fn __reduce67<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Order0BinOp = "%" => ActionFn(106);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action106::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    fn __reduce68<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Order1BinOp = "+" => ActionFn(107);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action107::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 29)
    }
    fn __reduce69<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Order1BinOp = "-" => ActionFn(108);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action108::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 29)
    }
    fn __reduce70<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Order2BinOp = "<<" => ActionFn(109);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action109::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 30)
    }
    fn __reduce71<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Order2BinOp = ">>" => ActionFn(110);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action110::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 30)
    }
    fn __reduce72<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Order3BinOp = "<" => ActionFn(111);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action111::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 31)
    }
    fn __reduce73<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Order3BinOp = ">" => ActionFn(112);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action112::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 31)
    }
    fn __reduce74<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Order3BinOp = "<=" => ActionFn(113);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action113::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 31)
    }
    fn __reduce75<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Order3BinOp = ">=" => ActionFn(114);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action114::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 31)
    }
    fn __reduce76<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Order4BinOp = "==" => ActionFn(115);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action115::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 32)
    }
    fn __reduce77<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Order4BinOp = "!=" => ActionFn(116);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action116::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 32)
    }
    fn __reduce78<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Order5BinOp = "&" => ActionFn(117);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action117::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 33)
    }
    fn __reduce79<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Order6BinOp = "^" => ActionFn(118);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action118::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 34)
    }
    fn __reduce80<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Order7BinOp = "|" => ActionFn(119);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action119::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 35)
    }
    fn __reduce81<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Order8BinOp = "&&" => ActionFn(120);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action120::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 36)
    }
    fn __reduce82<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Order9BinOp = "||" => ActionFn(121);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action121::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 37)
    }
    fn __reduce83<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Param = Typ, AllIdent => ActionFn(18);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action18::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 38)
    }
    fn __reduce84<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParamList = "(", ")" => ActionFn(16);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action16::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 39)
    }
    fn __reduce85<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParamList = "(", Param, ParamListFollow, ")" => ActionFn(17);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action17::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (4, 39)
    }
    fn __reduce86<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParamListFollow =  => ActionFn(14);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action14::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 40)
    }
    fn __reduce87<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ParamListFollow = ",", Param, ParamListFollow => ActionFn(15);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action15::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 40)
    }
    fn __reduce88<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PostOp = "++" => ActionFn(102);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action102::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 41)
    }
    fn __reduce89<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PostOp = "--" => ActionFn(103);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action103::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 41)
    }
    fn __reduce90<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ReturnType = "void" => ActionFn(12);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action12::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 42)
    }
    fn __reduce91<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ReturnType = Typ => ActionFn(13);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 42)
    }
    fn __reduce92<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Sdecl = "struct", AllIdent, ";" => ActionFn(8);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action8::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (3, 43)
    }
    fn __reduce93<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Sdefn = "struct", AllIdent, "{", FieldList, "}", ";" => ActionFn(9);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant10(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action9::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 44)
    }
    fn __reduce94<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Simp = Typ, Ident => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action41::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 45)
    }
    fn __reduce95<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Simp = Typ, Ident, "=", Expr => ActionFn(42);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant6(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action42::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 45)
    }
    fn __reduce96<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Simp = SubExp, AsnOp, Expr => ActionFn(43);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action43::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 45)
    }
    fn __reduce97<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Simp = Expr => ActionFn(44);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action44::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 45)
    }
    fn __reduce98<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SimpOpt =  => ActionFn(39);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action39::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 46)
    }
    fn __reduce99<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SimpOpt = Simp => ActionFn(40);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 46)
    }
    fn __reduce100<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SimpStmt = Simp, ";" => ActionFn(36);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action36::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 47)
    }
    fn __reduce101<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SimpStmt = "return", Expr, ";" => ActionFn(144);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action144::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 47)
    }
    fn __reduce102<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SimpStmt = "return", ";" => ActionFn(145);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action145::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 47)
    }
    fn __reduce103<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SimpStmt = "assert", "(", Expr, ")", ";" => ActionFn(38);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action38::<>(__sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (5, 47)
    }
    fn __reduce104<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stmts =  => ActionFn(22);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action22::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (0, 48)
    }
    fn __reduce105<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stmts = SurfaceStmt, Stmts => ActionFn(23);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action23::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 48)
    }
    fn __reduce106<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SubExp = "*", SubExp => ActionFn(68);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action68::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 49)
    }
    fn __reduce107<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SubExp = SubExp1 => ActionFn(69);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action69::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 49)
    }
    fn __reduce108<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SubExp0 = "NULL" => ActionFn(56);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action56::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 50)
    }
    fn __reduce109<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SubExp0 = Number => ActionFn(57);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action57::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 50)
    }
    fn __reduce110<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SubExp0 = Ident => ActionFn(58);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action58::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 50)
    }
    fn __reduce111<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SubExp0 = "true" => ActionFn(59);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action59::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 50)
    }
    fn __reduce112<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SubExp0 = "false" => ActionFn(60);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 50)
    }
    fn __reduce113<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SubExp0 = "(", Expr, ")" => ActionFn(61);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action61::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 50)
    }
    fn __reduce114<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SubExp0 = FunctionCall => ActionFn(62);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action62::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 50)
    }
    fn __reduce115<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SubExp0 = SubExp0, ".", AllIdent => ActionFn(63);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action63::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 50)
    }
    fn __reduce116<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SubExp0 = SubExp0, "->", AllIdent => ActionFn(64);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action64::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 50)
    }
    fn __reduce117<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SubExp0 = SubExp0, "[", Expr, "]" => ActionFn(65);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action65::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 50)
    }
    fn __reduce118<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SubExp1 = SubExp1, PostOp => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 51)
    }
    fn __reduce119<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SubExp1 = SubExp0 => ActionFn(67);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action67::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 51)
    }
    fn __reduce120<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SurfaceFdefn = ReturnType, Ident, ParamList, Block => ActionFn(10);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant7(__symbols);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action10::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (4, 52)
    }
    fn __reduce121<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SurfaceGdecl = Fdecl => ActionFn(2);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 53)
    }
    fn __reduce122<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SurfaceGdecl = SurfaceFdefn => ActionFn(3);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 53)
    }
    fn __reduce123<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SurfaceGdecl = Typedef => ActionFn(4);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action4::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 53)
    }
    fn __reduce124<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SurfaceGdecl = Sdecl => ActionFn(5);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 53)
    }
    fn __reduce125<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SurfaceGdecl = Sdefn => ActionFn(6);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 53)
    }
    fn __reduce126<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SurfaceGdecl* =  => ActionFn(140);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action140::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (0, 54)
    }
    fn __reduce127<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SurfaceGdecl* = SurfaceGdecl+ => ActionFn(141);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action141::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 54)
    }
    fn __reduce128<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SurfaceGdecl+ = SurfaceGdecl => ActionFn(142);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action142::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 55)
    }
    fn __reduce129<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SurfaceGdecl+ = SurfaceGdecl+, SurfaceGdecl => ActionFn(143);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action143::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 55)
    }
    fn __reduce130<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SurfaceProgram =  => ActionFn(146);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action146::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 56)
    }
    fn __reduce131<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SurfaceProgram = SurfaceGdecl+ => ActionFn(147);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action147::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 56)
    }
    fn __reduce132<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SurfaceStmt = OpenStmt => ActionFn(24);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action24::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 57)
    }
    fn __reduce133<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SurfaceStmt = ClosedStmt => ActionFn(25);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 57)
    }
    fn __reduce134<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TernaryExpr = BasicExpr, "?", Expr, ":", Expr => ActionFn(55);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant6(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action55::<>(__sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (5, 58)
    }
    fn __reduce135<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Typ = "int" => ActionFn(93);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action93::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    fn __reduce136<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Typ = "bool" => ActionFn(94);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action94::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    fn __reduce137<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Typ = "struct", AllIdent => ActionFn(95);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action95::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 59)
    }
    fn __reduce138<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Typ = DeclaredIdent => ActionFn(96);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action96::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    fn __reduce139<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Typ = Typ, "*" => ActionFn(97);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action97::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 59)
    }
    fn __reduce140<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Typ = Typ, "[", "]" => ActionFn(98);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action98::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (3, 59)
    }
    fn __reduce141<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Typedef = "typedef", Typ, AllIdent, ";" => ActionFn(11);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action11::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (4, 60)
    }
    fn __reduce142<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnOp = "!" => ActionFn(99);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action99::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 61)
    }
    fn __reduce143<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnOp = "~" => ActionFn(100);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action100::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 61)
    }
    fn __reduce144<
        'input,
    >(
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnOp = "-" => ActionFn(101);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action101::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 61)
    }
}
#[allow(unused_imports)]
pub use self::__parse__SurfaceProgram::SurfaceProgramParser;

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action0<'input>((_, __0, _): (usize, SurfaceProgram, usize)) -> SurfaceProgram {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action1<'input>(
  (_, decls, _): (usize, alloc::vec::Vec<SurfaceGdecl>, usize),
) -> SurfaceProgram {
  decls
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action2<'input>((_, fdecl, _): (usize, Fdecl, usize)) -> SurfaceGdecl {
  SurfaceGdecl::Fdecl(fdecl)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action3<'input>((_, fdefn, _): (usize, SurfaceFdefn, usize)) -> SurfaceGdecl {
  SurfaceGdecl::Fdefn(fdefn)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action4<'input>((_, typedef, _): (usize, Typedef, usize)) -> SurfaceGdecl {
  SurfaceGdecl::Typedef(typedef)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action5<'input>((_, sdecl, _): (usize, Sdecl, usize)) -> SurfaceGdecl {
  SurfaceGdecl::Sdecl(sdecl)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action6<'input>((_, sdefn, _): (usize, Sdefn, usize)) -> SurfaceGdecl {
  SurfaceGdecl::Sdefn(sdefn)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action7<'input>(
  (_, r, _): (usize, ReturnType, usize),
  (_, i, _): (usize, String, usize),
  (_, p, _): (usize, ParamList, usize),
  (_, _, _): (usize, Token<'input>, usize),
) -> Fdecl {
  {
    Fdecl {
      ret_type: r,
      func_name: i,
      param_list: p,
    }
  }
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action8<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, i, _): (usize, String, usize),
  (_, _, _): (usize, Token<'input>, usize),
) -> Sdecl {
  {
    Sdecl { struct_name: i }
  }
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action9<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, i, _): (usize, String, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, f, _): (usize, ParamList, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, _, _): (usize, Token<'input>, usize),
) -> Sdefn {
  {
    Sdefn {
      struct_name: i,
      field_list: f,
    }
  }
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action10<'input>(
  (_, r, _): (usize, ReturnType, usize),
  (_, i, _): (usize, String, usize),
  (_, p, _): (usize, ParamList, usize),
  (_, b, _): (usize, SurfaceStmt, usize),
) -> SurfaceFdefn {
  {
    SurfaceFdefn {
      ret_type: r,
      func_name: i,
      param_list: p,
      body: b,
    }
  }
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action11<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, t, _): (usize, Typ, usize),
  (_, i, _): (usize, String, usize),
  (_, _, _): (usize, Token<'input>, usize),
) -> Typedef {
  Typedef {
    orig_type: t,
    new_type_name: i,
  }
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action12<'input>((_, __0, _): (usize, Token<'input>, usize)) -> ReturnType {
  ReturnType::Void
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action13<'input>((_, __0, _): (usize, Typ, usize)) -> ReturnType {
  ReturnType::Type(__0)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action14<'input>(__lookbehind: &usize, __lookahead: &usize) -> ParamList {
  ParamList(vec![])
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action15<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, param, _): (usize, Param, usize),
  (_, params, _): (usize, ParamList, usize),
) -> ParamList {
  {
    let mut new_params = vec![param];
    new_params.extend(params.0);
    ParamList(new_params)
  }
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action16<'input>(
  (_, __0, _): (usize, Token<'input>, usize),
  (_, __1, _): (usize, Token<'input>, usize),
) -> ParamList {
  ParamList(vec![])
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action17<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, param, _): (usize, Param, usize),
  (_, params, _): (usize, ParamList, usize),
  (_, _, _): (usize, Token<'input>, usize),
) -> ParamList {
  {
    let mut new_params = vec![param];
    new_params.extend(params.0);
    ParamList(new_params)
  }
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action18<'input>((_, t, _): (usize, Typ, usize), (_, i, _): (usize, String, usize)) -> Param {
  (t, i)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action19<'input>(__lookbehind: &usize, __lookahead: &usize) -> ParamList {
  ParamList(vec![])
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action20<'input>(
  (_, f, _): (usize, Param, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, fields, _): (usize, ParamList, usize),
) -> ParamList {
  {
    let mut new_fields = vec![f];
    new_fields.extend(fields.0);
    ParamList(new_fields)
  }
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action21<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, __0, _): (usize, Vec<SurfaceStmt>, usize),
  (_, _, _): (usize, Token<'input>, usize),
) -> SurfaceStmt {
  SurfaceStmt::Block(__0)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action22<'input>(__lookbehind: &usize, __lookahead: &usize) -> Vec<SurfaceStmt> {
  vec![]
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action23<'input>(
  (_, stmt, _): (usize, SurfaceStmt, usize),
  (_, rest, _): (usize, Vec<SurfaceStmt>, usize),
) -> Vec<SurfaceStmt> {
  {
    let mut all_stmts = vec![stmt];
    all_stmts.extend(rest);
    all_stmts
  }
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action24<'input>((_, __0, _): (usize, SurfaceStmt, usize)) -> SurfaceStmt {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action25<'input>((_, __0, _): (usize, SurfaceStmt, usize)) -> SurfaceStmt {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action26<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, e, _): (usize, Expr, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, s1, _): (usize, SurfaceStmt, usize),
) -> SurfaceStmt {
  SurfaceStmt::If(e, Box::new(s1), Option::None)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action27<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, e, _): (usize, Expr, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, s1, _): (usize, SurfaceStmt, usize),
) -> SurfaceStmt {
  SurfaceStmt::If(e, Box::new(s1), Option::None)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action28<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, e, _): (usize, Expr, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, s1, _): (usize, SurfaceStmt, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, s2, _): (usize, SurfaceStmt, usize),
) -> SurfaceStmt {
  SurfaceStmt::If(e, Box::new(s1), Option::Some(Box::new(s2)))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action29<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, e, _): (usize, Expr, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, s, _): (usize, SurfaceStmt, usize),
) -> SurfaceStmt {
  SurfaceStmt::While(e, Box::new(s))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action30<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, s1, _): (usize, Option<Box<SurfaceStmt>>, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, e, _): (usize, Expr, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, s2, _): (usize, Option<Box<SurfaceStmt>>, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, s3, _): (usize, SurfaceStmt, usize),
) -> SurfaceStmt {
  SurfaceStmt::For(s1, e, s2, Box::new(s3))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action31<'input>((_, __0, _): (usize, SurfaceStmt, usize)) -> SurfaceStmt {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action32<'input>((_, __0, _): (usize, SurfaceStmt, usize)) -> SurfaceStmt {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action33<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, e, _): (usize, Expr, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, s1, _): (usize, SurfaceStmt, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, s2, _): (usize, SurfaceStmt, usize),
) -> SurfaceStmt {
  SurfaceStmt::If(e, Box::new(s1), Option::Some(Box::new(s2)))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action34<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, e, _): (usize, Expr, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, s, _): (usize, SurfaceStmt, usize),
) -> SurfaceStmt {
  SurfaceStmt::While(e, Box::new(s))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action35<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, s1, _): (usize, Option<Box<SurfaceStmt>>, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, e, _): (usize, Expr, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, s2, _): (usize, Option<Box<SurfaceStmt>>, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, s3, _): (usize, SurfaceStmt, usize),
) -> SurfaceStmt {
  SurfaceStmt::For(s1, e, s2, Box::new(s3))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action36<'input>(
  (_, __0, _): (usize, SurfaceStmt, usize),
  (_, _, _): (usize, Token<'input>, usize),
) -> SurfaceStmt {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action37<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, e, _): (usize, core::option::Option<Expr>, usize),
  (_, _, _): (usize, Token<'input>, usize),
) -> SurfaceStmt {
  SurfaceStmt::Ret(e)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action38<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, e, _): (usize, Expr, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, _, _): (usize, Token<'input>, usize),
) -> SurfaceStmt {
  SurfaceStmt::Assert(e)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action39<'input>(__lookbehind: &usize, __lookahead: &usize) -> Option<Box<SurfaceStmt>> {
  Option::None
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action40<'input>((_, __0, _): (usize, SurfaceStmt, usize)) -> Option<Box<SurfaceStmt>> {
  Option::Some(Box::new(__0))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action41<'input>(
  (_, t, _): (usize, Typ, usize),
  (_, v, _): (usize, String, usize),
) -> SurfaceStmt {
  SurfaceStmt::Decl(t, v, None)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action42<'input>(
  (_, t, _): (usize, Typ, usize),
  (_, v, _): (usize, String, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, e, _): (usize, Expr, usize),
) -> SurfaceStmt {
  SurfaceStmt::Decl(t, v, Some(e))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action43<'input>(
  (_, l, _): (usize, Expr, usize),
  (_, o, _): (usize, AsnOp, usize),
  (_, e, _): (usize, Expr, usize),
) -> SurfaceStmt {
  SurfaceStmt::Asgn(l, o, e)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action44<'input>((_, __0, _): (usize, Expr, usize)) -> SurfaceStmt {
  SurfaceStmt::Expr(__0)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action45<'input>((_, e, _): (usize, Expr, usize)) -> Arg {
  e
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action46<'input>(
  (_, __0, _): (usize, Token<'input>, usize),
  (_, __1, _): (usize, Token<'input>, usize),
) -> ArgList {
  ArgList(vec![])
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action47<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, e, _): (usize, Expr, usize),
  (_, a, _): (usize, ArgList, usize),
  (_, _, _): (usize, Token<'input>, usize),
) -> ArgList {
  {
    let mut args = vec![e];
    args.extend(a.0);
    ArgList(args)
  }
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action48<'input>(__lookbehind: &usize, __lookahead: &usize) -> ArgList {
  ArgList(vec![])
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action49<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, e, _): (usize, Expr, usize),
  (_, a, _): (usize, ArgList, usize),
) -> ArgList {
  {
    let mut args = vec![e];
    args.extend(a.0);
    ArgList(args)
  }
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action50<'input>((_, __0, _): (usize, Expr, usize)) -> Expr {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action51<'input>((_, __0, _): (usize, Expr, usize)) -> Expr {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action52<'input>(
  (_, f, _): (usize, String, usize),
  (_, a, _): (usize, ArgList, usize),
) -> Expr {
  Expr::FunctionCall(f, a)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action53<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, t, _): (usize, Typ, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, e, _): (usize, Expr, usize),
  (_, _, _): (usize, Token<'input>, usize),
) -> Expr {
  Expr::AllocArray(t, Box::new(e))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action54<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, t, _): (usize, Typ, usize),
  (_, _, _): (usize, Token<'input>, usize),
) -> Expr {
  Expr::Alloc(t)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action55<'input>(
  (_, e1, _): (usize, Expr, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, e2, _): (usize, Expr, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, e3, _): (usize, Expr, usize),
) -> Expr {
  Expr::Ternary(Box::new(e1), Box::new(e2), Box::new(e3))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action56<'input>((_, __0, _): (usize, Token<'input>, usize)) -> Expr {
  Expr::Null
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action57<'input>((_, n, _): (usize, i64, usize)) -> Expr {
  Expr::Number(n as i32)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action58<'input>((_, v, _): (usize, String, usize)) -> Expr {
  Expr::Variable(v)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action59<'input>((_, __0, _): (usize, Token<'input>, usize)) -> Expr {
  Expr::True
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action60<'input>((_, __0, _): (usize, Token<'input>, usize)) -> Expr {
  Expr::False
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action61<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, __0, _): (usize, Expr, usize),
  (_, _, _): (usize, Token<'input>, usize),
) -> Expr {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action62<'input>((_, __0, _): (usize, Expr, usize)) -> Expr {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action63<'input>(
  (_, e, _): (usize, Expr, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, v, _): (usize, String, usize),
) -> Expr {
  Expr::StructAccess(Box::new(e), v, Box::new(Typ::Null))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action64<'input>(
  (_, e, _): (usize, Expr, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, v, _): (usize, String, usize),
) -> Expr {
  Expr::StructDeref(Box::new(e), v, Box::new(Typ::Null))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action65<'input>(
  (_, e1, _): (usize, Expr, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, e2, _): (usize, Expr, usize),
  (_, _, _): (usize, Token<'input>, usize),
) -> Expr {
  Expr::ArrayAccess(Box::new(e1), Box::new(e2), Box::new(Typ::Null))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action66<'input>((_, v, _): (usize, Expr, usize), (_, o, _): (usize, PostOp, usize)) -> Expr {
  Expr::PostOp(Box::new(v), o)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action67<'input>((_, __0, _): (usize, Expr, usize)) -> Expr {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action68<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, e, _): (usize, Expr, usize),
) -> Expr {
  Expr::PointerDeref(Box::new(e), Box::new(Typ::Null))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action69<'input>((_, __0, _): (usize, Expr, usize)) -> Expr {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action70<'input>((_, __0, _): (usize, Expr, usize)) -> Expr {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action71<'input>((_, o, _): (usize, UnOp, usize), (_, e, _): (usize, Expr, usize)) -> Expr {
  match (o, &e) {
    // Neg
    (UnOp::Neg, Expr::Number(a)) => Expr::Number((-1 * (*a as i64)) as i32),
    // Not
    (UnOp::Not, Expr::True) => Expr::False,
    (UnOp::Not, Expr::False) => Expr::True,
    // BitNot
    (UnOp::BitNot, Expr::Number(a)) => Expr::Number((!a) as i32),
    _ => Expr::Unop(o, Box::new(e)),
  }
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action72<'input>((_, __0, _): (usize, Expr, usize)) -> Expr {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action73<'input>(
  (_, l, _): (usize, Expr, usize),
  (_, o, _): (usize, BinOp, usize),
  (_, r, _): (usize, Expr, usize),
) -> Expr {
  Expr::Binop(Box::new(l), o, Box::new(r))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action74<'input>((_, __0, _): (usize, Expr, usize)) -> Expr {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action75<'input>(
  (_, l, _): (usize, Expr, usize),
  (_, o, _): (usize, BinOp, usize),
  (_, r, _): (usize, Expr, usize),
) -> Expr {
  Expr::Binop(Box::new(l), o, Box::new(r))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action76<'input>((_, __0, _): (usize, Expr, usize)) -> Expr {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action77<'input>(
  (_, l, _): (usize, Expr, usize),
  (_, o, _): (usize, BinOp, usize),
  (_, r, _): (usize, Expr, usize),
) -> Expr {
  Expr::Binop(Box::new(l), o, Box::new(r))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action78<'input>((_, __0, _): (usize, Expr, usize)) -> Expr {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action79<'input>(
  (_, l, _): (usize, Expr, usize),
  (_, o, _): (usize, BinOp, usize),
  (_, r, _): (usize, Expr, usize),
) -> Expr {
  Expr::Binop(Box::new(l), o, Box::new(r))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action80<'input>((_, __0, _): (usize, Expr, usize)) -> Expr {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action81<'input>(
  (_, l, _): (usize, Expr, usize),
  (_, o, _): (usize, BinOp, usize),
  (_, r, _): (usize, Expr, usize),
) -> Expr {
  Expr::Binop(Box::new(l), o, Box::new(r))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action82<'input>((_, __0, _): (usize, Expr, usize)) -> Expr {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action83<'input>(
  (_, l, _): (usize, Expr, usize),
  (_, o, _): (usize, BinOp, usize),
  (_, r, _): (usize, Expr, usize),
) -> Expr {
  Expr::Binop(Box::new(l), o, Box::new(r))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action84<'input>((_, __0, _): (usize, Expr, usize)) -> Expr {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action85<'input>(
  (_, l, _): (usize, Expr, usize),
  (_, o, _): (usize, BinOp, usize),
  (_, r, _): (usize, Expr, usize),
) -> Expr {
  Expr::Binop(Box::new(l), o, Box::new(r))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action86<'input>((_, __0, _): (usize, Expr, usize)) -> Expr {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action87<'input>(
  (_, l, _): (usize, Expr, usize),
  (_, o, _): (usize, BinOp, usize),
  (_, r, _): (usize, Expr, usize),
) -> Expr {
  Expr::Binop(Box::new(l), o, Box::new(r))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action88<'input>((_, __0, _): (usize, Expr, usize)) -> Expr {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action89<'input>(
  (_, l, _): (usize, Expr, usize),
  (_, o, _): (usize, BinOp, usize),
  (_, r, _): (usize, Expr, usize),
) -> Expr {
  Expr::Binop(Box::new(l), o, Box::new(r))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action90<'input>((_, __0, _): (usize, Expr, usize)) -> Expr {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action91<'input>(
  (_, l, _): (usize, Expr, usize),
  (_, o, _): (usize, BinOp, usize),
  (_, r, _): (usize, Expr, usize),
) -> Expr {
  Expr::Binop(Box::new(l), o, Box::new(r))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action92<'input>((_, __0, _): (usize, Expr, usize)) -> Expr {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action93<'input>((_, __0, _): (usize, Token<'input>, usize)) -> Typ {
  Typ::Int
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action94<'input>((_, __0, _): (usize, Token<'input>, usize)) -> Typ {
  Typ::Bool
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action95<'input>(
  (_, _, _): (usize, Token<'input>, usize),
  (_, i, _): (usize, String, usize),
) -> Typ {
  Typ::Struct(i)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action96<'input>((_, i, _): (usize, String, usize)) -> Typ {
  Typ::Custom(i)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action97<'input>(
  (_, t, _): (usize, Typ, usize),
  (_, _, _): (usize, Token<'input>, usize),
) -> Typ {
  Typ::Pointer(Box::new(t))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action98<'input>(
  (_, t, _): (usize, Typ, usize),
  (_, _, _): (usize, Token<'input>, usize),
  (_, _, _): (usize, Token<'input>, usize),
) -> Typ {
  Typ::Array(Box::new(t))
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action99<'input>((_, __0, _): (usize, Token<'input>, usize)) -> UnOp {
  UnOp::Not
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action100<'input>((_, __0, _): (usize, Token<'input>, usize)) -> UnOp {
  UnOp::BitNot
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action101<'input>((_, __0, _): (usize, Token<'input>, usize)) -> UnOp {
  UnOp::Neg
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action102<'input>((_, __0, _): (usize, Token<'input>, usize)) -> PostOp {
  PostOp::Inc
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action103<'input>((_, __0, _): (usize, Token<'input>, usize)) -> PostOp {
  PostOp::Dec
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action104<'input>((_, __0, _): (usize, Token<'input>, usize)) -> BinOp {
  BinOp::Mul
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action105<'input>((_, __0, _): (usize, Token<'input>, usize)) -> BinOp {
  BinOp::Div
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action106<'input>((_, __0, _): (usize, Token<'input>, usize)) -> BinOp {
  BinOp::Mod
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action107<'input>((_, __0, _): (usize, Token<'input>, usize)) -> BinOp {
  BinOp::Add
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action108<'input>((_, __0, _): (usize, Token<'input>, usize)) -> BinOp {
  BinOp::Sub
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action109<'input>((_, __0, _): (usize, Token<'input>, usize)) -> BinOp {
  BinOp::Shl
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action110<'input>((_, __0, _): (usize, Token<'input>, usize)) -> BinOp {
  BinOp::Shr
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action111<'input>((_, __0, _): (usize, Token<'input>, usize)) -> BinOp {
  BinOp::LessThan
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action112<'input>((_, __0, _): (usize, Token<'input>, usize)) -> BinOp {
  BinOp::GreaterThan
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action113<'input>((_, __0, _): (usize, Token<'input>, usize)) -> BinOp {
  BinOp::Leq
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action114<'input>((_, __0, _): (usize, Token<'input>, usize)) -> BinOp {
  BinOp::Geq
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action115<'input>((_, __0, _): (usize, Token<'input>, usize)) -> BinOp {
  BinOp::EqEq
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action116<'input>((_, __0, _): (usize, Token<'input>, usize)) -> BinOp {
  BinOp::Uneq
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action117<'input>((_, __0, _): (usize, Token<'input>, usize)) -> BinOp {
  BinOp::BitAnd
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action118<'input>((_, __0, _): (usize, Token<'input>, usize)) -> BinOp {
  BinOp::BitXor
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action119<'input>((_, __0, _): (usize, Token<'input>, usize)) -> BinOp {
  BinOp::BitOr
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action120<'input>((_, __0, _): (usize, Token<'input>, usize)) -> BinOp {
  BinOp::LogicalAnd
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action121<'input>((_, __0, _): (usize, Token<'input>, usize)) -> BinOp {
  BinOp::LogicalOr
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action122<'input>((_, __0, _): (usize, Token<'input>, usize)) -> AsnOp {
  AsnOp::Eq
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action123<'input>((_, __0, _): (usize, Token<'input>, usize)) -> AsnOp {
  AsnOp::PlusEq
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action124<'input>((_, __0, _): (usize, Token<'input>, usize)) -> AsnOp {
  AsnOp::MinusEq
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action125<'input>((_, __0, _): (usize, Token<'input>, usize)) -> AsnOp {
  AsnOp::TimesEq
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action126<'input>((_, __0, _): (usize, Token<'input>, usize)) -> AsnOp {
  AsnOp::DivEq
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action127<'input>((_, __0, _): (usize, Token<'input>, usize)) -> AsnOp {
  AsnOp::ModEq
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action128<'input>((_, __0, _): (usize, Token<'input>, usize)) -> AsnOp {
  AsnOp::AndEq
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action129<'input>((_, __0, _): (usize, Token<'input>, usize)) -> AsnOp {
  AsnOp::XorEq
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action130<'input>((_, __0, _): (usize, Token<'input>, usize)) -> AsnOp {
  AsnOp::OrEq
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action131<'input>((_, __0, _): (usize, Token<'input>, usize)) -> AsnOp {
  AsnOp::ShlEq
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action132<'input>((_, __0, _): (usize, Token<'input>, usize)) -> AsnOp {
  AsnOp::ShrEq
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action133<'input>((_, __0, _): (usize, String, usize)) -> String {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action134<'input>((_, __0, _): (usize, String, usize)) -> String {
  __0
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action135<'input>((_, i, _): (usize, &'input str, usize)) -> String {
  i.to_owned()
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action136<'input>((_, i, _): (usize, &'input str, usize)) -> String {
  i.to_owned()
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action137<'input>((_, n, _): (usize, Token<'input>, usize)) -> i64 {
  n.into_number().unwrap()
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action138<'input>((_, __0, _): (usize, Expr, usize)) -> core::option::Option<Expr> {
  Some(__0)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action139<'input>(__lookbehind: &usize, __lookahead: &usize) -> core::option::Option<Expr> {
  None
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action140<'input>(__lookbehind: &usize, __lookahead: &usize) -> alloc::vec::Vec<SurfaceGdecl> {
  alloc::vec![]
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action141<'input>(
  (_, v, _): (usize, alloc::vec::Vec<SurfaceGdecl>, usize),
) -> alloc::vec::Vec<SurfaceGdecl> {
  v
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action142<'input>((_, __0, _): (usize, SurfaceGdecl, usize)) -> alloc::vec::Vec<SurfaceGdecl> {
  alloc::vec![__0]
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action143<'input>(
  (_, v, _): (usize, alloc::vec::Vec<SurfaceGdecl>, usize),
  (_, e, _): (usize, SurfaceGdecl, usize),
) -> alloc::vec::Vec<SurfaceGdecl> {
  {
    let mut v = v;
    v.push(e);
    v
  }
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action144<'input>(
  __0: (usize, Token<'input>, usize),
  __1: (usize, Expr, usize),
  __2: (usize, Token<'input>, usize),
) -> SurfaceStmt {
  let __start0 = __1.0;
  let __end0 = __1.2;
  let __temp0 = __action138(__1);
  let __temp0 = (__start0, __temp0, __end0);
  __action37(__0, __temp0, __2)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action145<'input>(
  __0: (usize, Token<'input>, usize),
  __1: (usize, Token<'input>, usize),
) -> SurfaceStmt {
  let __start0 = __0.2;
  let __end0 = __1.0;
  let __temp0 = __action139(&__start0, &__end0);
  let __temp0 = (__start0, __temp0, __end0);
  __action37(__0, __temp0, __1)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action146<'input>(__lookbehind: &usize, __lookahead: &usize) -> SurfaceProgram {
  let __start0 = *__lookbehind;
  let __end0 = *__lookahead;
  let __temp0 = __action140(&__start0, &__end0);
  let __temp0 = (__start0, __temp0, __end0);
  __action1(__temp0)
}

#[allow(
  clippy::too_many_arguments,
  clippy::needless_lifetimes,
  clippy::just_underscores_and_digits
)]
fn __action147<'input>(__0: (usize, alloc::vec::Vec<SurfaceGdecl>, usize)) -> SurfaceProgram {
  let __start0 = __0.0;
  let __end0 = __0.2;
  let __temp0 = __action141(__0);
  let __temp0 = (__start0, __temp0, __end0);
  __action1(__temp0)
}
#[allow(clippy::type_complexity, dead_code)]

pub trait __ToTriple<'input> {
  fn to_triple(
    value: Self,
  ) -> Result<(usize, Token<'input>, usize), __lalrpop_util::ParseError<usize, Token<'input>, String>>;
}

impl<'input> __ToTriple<'input> for (usize, Token<'input>, usize) {
  fn to_triple(
    value: Self,
  ) -> Result<(usize, Token<'input>, usize), __lalrpop_util::ParseError<usize, Token<'input>, String>>
  {
    Ok(value)
  }
}
impl<'input> __ToTriple<'input> for Result<(usize, Token<'input>, usize), String> {
  fn to_triple(
    value: Self,
  ) -> Result<(usize, Token<'input>, usize), __lalrpop_util::ParseError<usize, Token<'input>, String>>
  {
    match value {
      Ok(v) => Ok(v),
      Err(error) => Err(__lalrpop_util::ParseError::User { error }),
    }
  }
}
